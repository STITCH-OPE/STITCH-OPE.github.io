// Simple Bulma Carousel implementation
(function() {
    'use strict';

    function BulmaCarousel(element, options) {
        this.element = element;
        this.options = Object.assign({
            slidesToShow: 1,
            slidesToScroll: 1,
            loop: true,
            infinite: true,
            autoplay: false,
            autoplaySpeed: 3000
        }, options);
        
        this.currentSlide = 0;
        this.slides = [];
        this.isPlaying = false;
        this.intervalId = null;
        
        this.init();
    }

    BulmaCarousel.prototype.init = function() {
        this.slides = Array.from(this.element.children);
        this.totalSlides = this.slides.length;
        
        if (this.totalSlides === 0) return;

        // Hide all slides except first
        this.slides.forEach((slide, index) => {
            slide.style.display = index === 0 ? 'block' : 'none';
        });

        // Start autoplay if enabled
        if (this.options.autoplay) {
            this.play();
        }

        // Add event listeners for manual control (if navigation exists)
        this.bindEvents();
    };

    BulmaCarousel.prototype.bindEvents = function() {
        const nav = this.element.querySelector('.slider-navigation');
        if (nav) {
            const prevBtn = nav.querySelector('.slider-navigation-previous');
            const nextBtn = nav.querySelector('.slider-navigation-next');
            
            if (prevBtn) {
                prevBtn.addEventListener('click', () => this.prev());
            }
            if (nextBtn) {
                nextBtn.addEventListener('click', () => this.next());
            }
        }

        // Pause on hover if autoplay is enabled
        if (this.options.autoplay) {
            this.element.addEventListener('mouseenter', () => this.pause());
            this.element.addEventListener('mouseleave', () => this.play());
        }
    };

    BulmaCarousel.prototype.goToSlide = function(index) {
        if (index < 0 || index >= this.totalSlides) return;

        // Hide current slide
        this.slides[this.currentSlide].style.display = 'none';
        
        // Show new slide
        this.currentSlide = index;
        this.slides[this.currentSlide].style.display = 'block';
    };

    BulmaCarousel.prototype.next = function() {
        let nextIndex = this.currentSlide + this.options.slidesToScroll;
        
        if (nextIndex >= this.totalSlides) {
            nextIndex = this.options.loop ? 0 : this.totalSlides - 1;
        }
        
        this.goToSlide(nextIndex);
    };

    BulmaCarousel.prototype.prev = function() {
        let prevIndex = this.currentSlide - this.options.slidesToScroll;
        
        if (prevIndex < 0) {
            prevIndex = this.options.loop ? this.totalSlides - 1 : 0;
        }
        
        this.goToSlide(prevIndex);
    };

    BulmaCarousel.prototype.play = function() {
        if (this.isPlaying || !this.options.autoplay) return;
        
        this.isPlaying = true;
        this.intervalId = setInterval(() => {
            this.next();
        }, this.options.autoplaySpeed);
    };

    BulmaCarousel.prototype.pause = function() {
        if (!this.isPlaying) return;
        
        this.isPlaying = false;
        if (this.intervalId) {
            clearInterval(this.intervalId);
            this.intervalId = null;
        }
    };

    BulmaCarousel.prototype.destroy = function() {
        this.pause();
        // Remove event listeners and reset styles if needed
    };

    // Static method to attach to elements
    BulmaCarousel.attach = function(selector, options) {
        const elements = document.querySelectorAll(selector);
        const instances = [];
        
        elements.forEach(element => {
            instances.push(new BulmaCarousel(element, options));
        });
        
        return instances;
    };

    // Export to global scope
    window.bulmaCarousel = BulmaCarousel;

})();