// Simple Bulma Slider implementation
(function() {
    'use strict';

    function BulmaSlider(element, options) {
        this.element = element;
        this.options = Object.assign({
            // Default options
        }, options);
        
        this.init();
    }

    BulmaSlider.prototype.init = function() {
        // Basic slider functionality
        this.element.addEventListener('input', (e) => {
            this.updateOutput(e.target.value);
        });

        this.element.addEventListener('change', (e) => {
            this.updateOutput(e.target.value);
        });

        // Initialize output if exists
        this.updateOutput(this.element.value);
    };

    BulmaSlider.prototype.updateOutput = function(value) {
        const output = this.findOutput();
        if (output) {
            output.textContent = value;
            
            // Update position if tooltip
            if (this.element.classList.contains('has-output-tooltip')) {
                this.updateOutputPosition(output);
            }
        }
    };

    BulmaSlider.prototype.findOutput = function() {
        const id = this.element.id;
        if (!id) return null;
        
        return document.querySelector(`output[for="${id}"]`);
    };

    BulmaSlider.prototype.updateOutputPosition = function(output) {
        const slider = this.element;
        const value = slider.value;
        const min = slider.min || 0;
        const max = slider.max || 100;
        
        const percent = (value - min) / (max - min);
        const sliderWidth = slider.offsetWidth;
        const position = percent * sliderWidth;
        
        output.style.left = `${position}px`;
    };

    // Static method to attach to elements
    BulmaSlider.attach = function(selector, options) {
        const elements = document.querySelectorAll(selector || 'input[type="range"]');
        const instances = [];
        
        elements.forEach(element => {
            instances.push(new BulmaSlider(element, options));
        });
        
        return instances;
    };

    // Export to global scope
    window.bulmaSlider = BulmaSlider;

})();